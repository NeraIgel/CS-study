C++는 프로그램을 여러 개의 파일로 나누어 개발할 것을 권장한다.

효과적인 파일 구성 방식은 다음과 같이 세 부분으로 나누어 관리하는 것이다.
-. 사용자 정의형과, 사용자 정의형을 처리하는 함수들의 원형이 들어 있는 헤더 파일 (e.g. 함수 원형, 기호 상수, 구조체 선언, 클래스 선언, 템플릿 선언, 인라인 함수)
-. 사용자 정의형을 처리하는 함수들의 정의가 들어 있는 소스 파일
-. 사용자 정의형을 처리하는 함수들을 호출하는 소스 파일

(1) 메모리 관리
프로그램에서 데이터를 저장하는데 사용되는 메모리는 수명, 범위, 연계에 의해 특성이 정해진다.
수명은 데이터 객체의 지속성을 나타낸다. 범위와 연계는 식별자의 가시성을 나타낸다.

메모리는 정적 수명, 자동 수명, 할당된 수명, 쓰레드 수명(C++11)을 가질 수 있다.
정적 메모리는, 프로그램 실행이 시작될 떄 메모리가 할당되고, 프로그램이 실행되는 동안 계속 유지된다.
자동 메모리는, 프로그램 실행이 변수가 정의되어 있는 블록에 진입할 때 그 변수의 메모리가 할당되고, 프로그램 실행이 그 블록을 탈출할 떄 해제된다.
할당된 메모리는, new 연산자를 사용함으로써 메모리가 할당되고, delete 연산자를 사용함으로써 그 메모리가 해제된다.

범위는 파일, 블록, 클래스, 이름 공간 범위를 가질 수 있다.
모든 함수들의 외부에 정의된 변수는, 파일(번역 단위) 범위를 가진다.
블록 안에 정의된 변수나 함수 매개변수로 정의된 변수는, 블록 범위를 가진다.

연계는 무연계, 내부 연계, 외부 연계를 가질 수 있다.
블록 범위를 가지는 지역 변수는, 무연계를 가진다.
파일 범위를 가지는 변수는, 내부 연계 또는 외부 연계를 가질 수 있다.

(2) 기억 공간 체계
C++는 다음과 같은 기억 공간들을 제공한다.
대부분의 경우에, 자동 변수를 선택하는 것이 최선이다.

a. 자동(Automatic)
블록 안에(또는 함수 매개변수로) 선언된 변수는 자동 기억 공간에 속한다.
자동 변수는 자동 수명, 블록 범위, 무연계를 가진다. 초기화하지 않으면, 자동 변수의 값은 결정되지 않는다.

자동 변수를 관리하는 일반적인 방법은, 메모리의 일부를 예약해 두고, 변수들의 생성과 소멸을 스택으로 관리하는 것이다.
새로 생성되는 데이터는 먼저 생성된 데이터의 위에(같은 위치가 아니라 인접한 위치에) 쌓이고, 프로그램이 데이터의 사용을 마치면 그 데이터는 스택에서 제거된다.

b. 정적 무연계(Static, no linkage)
static 지정자를 사용하여 블록 안에 선언된 변수는 무연계 정적 기억 공간에 속한다.
이 블록 범위 정적 변수는 정적 수명, 블록 범위, 무연계를 가진다. 컴파일될 때 1회만 초기화되고, 명시적으로 초기화하지 않으면 0으로 설정된다.

c. 정적 내부 연계(Static, internal linkage)
static 지정자를 사용하여 모든 함수들의 외부에 선언된 변수는 내부 연계 정적 기억 공간에 속한다.
내부 연계 정적 변수는 정적 수명, 파일 범위, 내부 연계를 가진다. 컴파일될 때 1회만 초기화되고, 명시적으로 초기화하지 않으면 0으로 설정된다.

d. 정적 외부 연계(Static, external linkage)
static 지정자를 사용하지 않고 모든 함수들의 외부에 선언된 변수는 외부 연계 정적 기억 공간에 속한다.
외부 연계 정적 변수는 정적 수명, 파일 범위, 외부 연계를 가진다. 컴파일될 때 1회만 초기화되고, 명시적으로 초기화하지 않으면 0으로 설정된다.
외부 파일에 정의되어 있는 변수를 사용하기 위해서는, extern 키워드를 사용하여 미리 선언해야 한다.

(3) 데이터형 한정자
C++는 데이터형 한정자로, const, volatile, mutable, thread_local(C++11)을 제공한다.

const 데이터형 한정자는, 데이터를 상수로 한정한다.
volatile 데이터형 한정자는, 컴파일러 최적화를 위해서 제공되었다. 이 것이 붙어있으면, 다른 대행자에 의해 데이터가 변경될 수 있음을 알린다.
mutable 데이터형 한정자는, 특정 구조체(또는 클래스)가 const로 선언되어 있다 하더라도 그 구조체의 멤버를 변경할 수 있음을 나타내는데 사용할 수 있다.

C++에서는 const 한정자가 전역 변수에 대한 디폴트 연계를 변경한다.
파일 범위를 가지는 전역 변수는 기본적으로 외부 연계를 가지지만, const로 한정하면 내부 연계를 가지게 된다. 만일, 전역 상수를 외부 연계로 변경하고 싶다면, extern 키워드를 사용하면 된다.

(4) 이름 공간
이름 공간(namespace)은 식별자들을 선언할 수 있는 이름이 명명된 영역을 정의할 수 있게 해 준다.
이름 공간의 목적은 식별자들의 이름이 서로 충돌하는 것을 막는 것이다.

이름 공간은 특히 여러 업체가 나누어 개발한 코드를 한데 결합하여 규모가 큰 프로그램을 개발하는 데 유용하다.
하나의 이름 공간에 들어 있는 식별자들은 사용 범위 결정 연산자, using 선언, using 지시자를 통해 사용할 수 있는 상태로 만들 수 있다.
-.	using Jill::fetch;	// using 선언
-.	using namespace Jack;	// using 지시자
