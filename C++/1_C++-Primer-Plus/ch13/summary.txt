객체 지향 프로그래밍의 중요한 목적 중의 하나가, 재활용할 수 있는 코드를 제공하는 것이다.

C의 전통적인 함수 라이브러리는 코드 재활용의 한 예이다. 그러나, 함수 라이브러리들은 한계를 가지고 있다.
함수 라이브러리의 소스 코드를 수정할 수 없거나 어려운 경우, 사용자의 프로그램을 라이브러리의 동작 방식에 맞추는 수밖에 없다.

C++의 클래스는 더 높은 수준의 재활용성을 제공한다.
C++는 클래스를 확장하고 수정하기 위해 단순한 코드 수정보다 더 강력한 수단을 제공한다. 그 것이 클래스 상속(class inheritance)이다.
이 것은 기본 클래스(base class)라 부르는 클래스로부터 메서드와 데이터 멤버들을 상속받아, 새로운 파생 클래스(derived class)를 만들 수 있게 한다.

클래스를 파생시키기 위해 기존 클래스의 소스 코드에 접근할 필요도 없다.
클래스 메서드의 컴파일된 코드와 헤더 파일들만 제공하는 클래스 라이브러리를 구입하면, 그러한 라이브러리 클래스에 기초하여 새로운 클래스들을 파생시킬 수 있다.
그와 반대로 자신이 작성한 클래스를 다른 사람들에게 배포할 때, 세부 구현의 비밀은 유지하면서 동료들이 그 클래스에 기능을 추가하여 새로운 클래스를 파생시킬 수 있게 허용할 수 있다.

(1) 클래스 상속
클래스 상속을 통하여 우리는 다음과 같은 일을 할 수 있다.
-. 기존의 클래스에 기능을 추가할 수 있다.
-. 기존의 클래스에 데이터를 추가할 수 있다.
-. 기존의 클래스가 동작하는 방식을 변경할 수 있다.

어떤 클래스를 다른 클래스로부터 상속할 때, 기존의 클래스를 기본 클래스(base class)라 하고, 상속받는 클래스를 파생 클래스(derived class)라 한다.
어떤 클래스를 다른 클래스로부터 상속할 때, 다음과 같은 형식을 사용한다.
-.	class DerivedClassName : memberAccessControl BaseClassName {	// public or protected or private
		...
	};

C++는 상속의 3가지 형식으로 public, protected, private를 가지고 있다.
그 중에서, public 상속이 가장 일반적인 형식이다.

(2) is-a 관계
public 상속은 is-a 관계를 나타낸다.
ia-a 관계는, 파생 클래스 객체가 기본 클래스 객체의 한 종류라는 것을 의미한다.

is-a 관계에서, 기본 클래스 객체를 대상으로 수행할 수 있는 모든 작업을, 파생 클래스 객체에 대해서도 수행할 수 있다.
is-a 관계에서, 기본 클래스 참조형과 포인터형은 명시적 데이터형 변환 없이도 파생 클래스 객체를 참조하거나 지시할 수 있다. 그 역은 성립하지 않는다.

(3) public 상속
파생 클래스형의 객체는 다음과 같은 특별한 속성을 가진다.
-. 파생 클래스형의 객체에 기본 클래스형의 데이터 멤버들이 저장된다.	=> 파생 클래스는 기본 클래스의 구현을 상속받는다.
-. 파생 클래스형의 객체는 기본 클래스형의 메서드들을 사용할 수 있다.	=> 파생 클래스는 기본 클래스의 인터페이스를 상속받는다.

public 상속에서는 기본 클래스의 public 멤버들이 파생 클래스의 public 멤버가 된다.
즉, public 상속에서 파생 클래스는 기본 클래스의 public 인터페이스를 상속받는다. 이 것이 is-a 관계이다. 예를 들어 아래와 같이, 인터페이스를 상속하는 것이 is-a 관계의 역할이다.
ex)	class TableTennisPlayer {
	public:
		explicit TableTennisPlayer(bool ht = false);
		~TableTennisPlayer();

		bool	getHasTable() const	{ return (_hasTable); }
	private:
		bool	_hasTable;
	};

	TableTennisPlayer::TableTennisPlayer(bool ht)
		: _hasTable(ht)
	{}

	TableTennisPlayer::~TableTennisPlayer()
	{}

	class RatedPlayer : public TableTennisPlayer {
	};

	TableTennisPlayer	player1(true);
	RatedPlayer		rplayer1;

	std::cout << player1.getHasTable() << std::endl;
	std::cout << rplayer1.getHasTable() << std::endl;		// 파생 클래스형 객체도 기본 클래스의 public 인터페이스를 사용할 수 있다.

파생 클래스형의 객체를 생성할 때, 기본 클래스의 데이터 멤버들을 먼저 초기화할 필요가 있으며, 이를 위해 파생 클래스의 생성자에서는 기본 클래스의 생성자를 호출해야 한다.
따라서, 파생 클래스의 생성자는 멤버 초기화 리스트에서 기본 클래스와 비정적 데이터 멤버를 초기화해야 하며, 이를 생략하면 기본 클래스와 비정적 데이터 멤버의 디폴트 생성자가 호출된다.
그리고, 파생 클래스는 기본 클래스의 데이터 멤버들과 대부분의 메서드들을 상속받는다. 그러나, 기본 클래스의 생성자와 소멸자와 대입 연산자는 상속받지 않기 때문에, 필요한 경우 사용자가 명시적으로 정의해야 한다.
ex)	class RatedPlayer : public TableTennisPlayer {
	public:
		explicit RatedPlayer(unsigned int r = 0, bool ht = false);
		~RatedPlayer();

		unsigned int	getRating() const	{ return (_rating); }
	private:
		unsigned int	_rating;
	};

	RatedPlayer::RatedPlayer(unsigned int r, bool ht)
		: TableTennisPlayer(ht), _rating(r)
	{}

	RatedPlayer::~RatedPlayer()
	{}

파생 클래스형의 객체가 생성될 때, 프로그램은 먼저 기본 클래스의 생성자를 호출하고, 그 다음에 파생 클래스의 생성자를 호출한다.
파생 클래스형의 객체가 수명이 다했을 때, 프로그램은 먼저 파생 클래스의 소멸자를 호출하고, 그 다음에 기본 클래스의 소멸자를 호출한다.
ex)	TableTennisPlayer::TableTennisPlayer(bool ht)
		:_hasTable(ht)
	{
		std::cout << "TableTennisPlayer(bool)" << std::endl;
	}

	RatedPlayer::RatedPlayer(unsigned int r, bool ht)
		: TableTennisPlayer(ht), _rating(r)
	{
		std::cout << "RatedPlayer(unsigned int, bool)" << std::endl;
	}

	TableTennisPlayer::~TableTennisPlayer()
	{
		std::cout << "~TableTennisPlayer()" << std::endl;
	}

	RatedPlayer::~RatedPlayer()
	{
		std::cout << "~RatedPlayer()" << std::endl;
	}

	RatedPlayer	rplayer1(1140, false);				// 객체의 소멸은 객체의 생성과 반대 순서로 일어난다.

파생 클래스는 기본 클래스의 public 멤버와 protected 멤버에 직접 접근할 수 있다.
파생 클래스는 기본 클래스의 private 멤버에는 기본 클래스의 public 메서드와 protected 메서드를 통해서만 접근할 수 있다.
ex)	class RatedPlayer : public TableTennisPlayer {
	public:
		...
		void showBaseMember() const;
	};

	void	RatedPlayer::showBaseMember() const
	{
		std::cout << std::boolalpha << getHasTable() << std::endl;
	}

public 상속에서는 기본 클래스 참조형과 포인터형이 명시적 데이터형 변환 없이도 파생 클래스 객체를 참조하거나 지시할 수 있기 때문에, 예를 들어 아래와 같이 코드를 작성할 수 있다.
ex)	std::ostream&	operator<<(std::ostream& os, const TableTennisPlayer& rt)
	{
		os << std::boolalpha << rt.getHasTable();
		return (os);
	}

	class RatedPlayer : public TableTennisPlayer {
	public:
		...
		RatedPlayer(const RatedPlayer& rhs);
		RatedPlayer& operator=(const RatedPlayer& rhs);
	};

	RatedPlayer::RatedPlayer(const RatedPlayer& rhs)
		: TableTennisPlayer(rhs), _rating(rhs.getRating())	// 파생 클래스는 기본 클래스의 데이터 멤버를 초기화하기 위하여 기본 클래스의 생성자를 호출할 수 있다.
	{}

	RatedPlayer&	RatedPlayer::operator=(const RatedPlayer& rhs)
	{
		if (this != &rhs)
		{
			TableTennisPlayer::operator=(rhs);		// 파생 클래스는 사용 범위 결정 연산자를 사용하여 기본 클래스의 메서드를 호출할 수 있다.
			_rating = rhs.getRating();
		}
		return (*this);
	}

	std::cout << player1 << std::endl;
	std::cout << rplayer1 << std::endl;

(4) public 다형 상속
public 상속에서는 파생 클래스가 기본 클래스 메서드의 인터페이스와 기본 구현을 상속받는다.
클래스 설계자는 파생 클래스가 기본 클래스 메서드를 재정의(overriding)하는 것을 허용할수 있으며, 그렇게 하면 호출하는 객체에 따라 메서드의 행동이 달라질 수 있다는 점에서 다형성을 가진다고 말할 수 있다.

파생 클래스에서 기본 클래스의 메서드를 다시 정의하는 것을 허용하려면, 기본 클래스에서 그 메서드의 앞에 키워드 virtual을 붙여 가상 함수(virtual function)로 선언해야 한다.
이렇게 하면, 참조나 포인터에 의해 접근되는 객체를, 참조형이나 포인터형에 기초하지 않고 객체형에 기초하여 다룰 수 있다.
이 경우, 기본 클래스의 소멸자도 가상으로 선언해야 어느 상황에서도 파생클래스의 소멸자가 호출된다.
ex)	class TableTennisPlayer {
	public:
		...
		virtual ~TableTennisPlayer();

		virtual void	display() const;
		void		wrongDisplay() const;
	};

	class RatedPlayer : public TableTennisPlayer {
	public:
		...
		virtual void	display() const;		// 기본 클래스에서 가상으로 선언하면 파생 클래스에서도 자동으로 가상 함수가 된다. 그러나, 이를 표시해두는 것이 바람직하다.
		void		wrongDisplay() const;
	};

	void	TableTennisPlayer::display() const
	{
		std::cout << "table: " << std::boolalpha << getHasTable() << std::endl;
	}

	void	TableTennisPlayer::wrongDisplay() const
	{
		std::cout << "table: " << std::boolalpha << getHasTable() << std::endl;
	}

	void	RatedPlayer::display() const
	{
		TableTennisPlayer::display();
		std::cout << "rating: " << getRating() << std::endl;
	}

	void	RatedPlayer::wrongDisplay() const
	{
		TableTennisPlayer::wrongDisplay();
		std::cout << "rating: " << getRating() << std::endl;
	}

	TableTennisPlayer	player1(true);
	RatedPlayer		rplayer1(1140, false);
	TableTennisPlayer&	rt1 = player1;
	TableTennisPlayer&	rt2 = rplayer1;

	rt1.display();
	rt2.display();
	rt1.wrongDisplay();
	rt2.wrongDisplay();					// 기본 클래스의 메서드가 가상으로 선언되어 있지 않으면, 참조형에 기초하여 메서드 버전이 호출된다.

기본 클래스의 메서드가 오버로딩되어 있어 다양한 시그니처를 가지는 메서드를 제공하는 경우, 파생 클래스에서 메서드를 재정의할 때 유의해야 한다.
파생 클래스가 특정 버전의 메서드만 재정의하면, 시그니처와는 상관 없이 같은 이름을 가진 모든 기본 클래스의 메서드들이 은닉된다.
따라서, 기본 클래스에서 메서드가 오버로딩되어 있다면, 파생 클래스에서 모든 버전을 재정의할 필요가 있다.
그리고, 파생 클래스에서 메서드를 재정의한다면, 오리지널 원형과 정확히 일치시킬 필요가 있다.

(5) 추상 클래스
클래스 설계자는 파생 클래스가 기본 클래스 메서드의 인터페이스만 상속받게끔 할 수도 있다.

파생 클래스에서 기본 클래스의 메서드를 반드시 재정의하게끔 하려면, 기본 클래스에서 그 메서드를 가상으로 선언하고 함수 선언 뒤에 = 0을 붙여 순수 가상 함수(pure virtual function)로 선언해야 한다.
이렇게 하여, 적어도 하나 이상의 순수 가상 함수를 가지는 클래스를 추상 클래스(abstract class)라 부른다. 추상 클래스는 객체를 생성할 수 없다.
그리고, 추상 클래스로부터 상속받는 클래스를 객체를 구체적으로 생성할 수 있다는 의미에서 구체화 클래스(concreate class)라고도 부른다.
ex)	class BaseEllipse {
	public:
		void	move(int nx, int ny)	{ _x = nx; _y = ny; }	// 추상 클래스도 순수 가상 함수가 아닌 메서드에 대해서는 기본 구현을 가질 수 있다.
		virtual double	area() const = 0;
	private:
		double	_x;
		double	_y;
	};

	class Ellipse : public BaseEllipse {
	public:
		virtual double	area() const;
		...
	};

	class Circle : public BaseEllipse {
	public:
		virtual double	area() const;
		...
	};

(6) 정적 결합과 동적 결합
소스 코드에 있는 함수 호출을 실행 코드의 특정 블록에 있는 함수 코드를 실행하라는 뜻으로 해석하는 것을 "함수 이름을 결합(binding)한다"라고 말한다.
비가상 함수는 이와 같은 종류의 결합을 컴파일하는 동안에 수행할 수 있다. 컴파일하는 동안에 일어나는 결합을 정적 결합(static binding)이라 한다.
가상 함수는 프로그램을 실행할 때 사용자가 객체를 결정하기 때문에, 어떤 함수를 사용할 것인지 컴파일 시에 결정할 수 없다.
그러므로 컴파일러는, 프로그램을 실행할 때 올바른 가상 함수가 선택되도록 하는 코드를 만들어 내야 한다.
이 작업을 동적 결합(dynaminc binding)이라 말한다.

C++에서 동적 결합은 참조와 포인터에 의해 호출되는 메서드와 관련되어 있다. 그리고 이 것은 부분적으로 상속 과정에 의해 지배를 받는다.
기본 클래스 참조나 포인터를 파생 클래스 참조나 포인터로 변환하는 것을 다운캐스팅(downcasting)이라 한다. 다운캐스팅은 명시적인 데이터형 변환 없이는 허용되지 않는다.
파생 클래스 참조나 포인터를 기본 클래스 참조나 포인터로 변환하는 것을 업캐스팅(upcasting)이라 한다. public 상속에서는 명시적인 데이터형 변환 없이도 업캐스팅이 허용된다.

(7) 가상 함수의 동작 원리
컴파일러가 가상 함수를 다루는 일반적인 방법은, 각각의 객체에 숨겨진 멤버를 하나씩 추가하는 것이다.
숨겨진 멤버는 가상 함수의 주소들로 이루어진 배열을 지시하는 포인터를 저장한다. 일반적으로 그 배열을 가상 함수 테이블(virtual function table; vtbl)이라고 한다.

예를 들어, 기본 클래스의 한 객체는, 그 클래스를 위한 모든 가상 함수들의 주소로 이루어진 테이블을 지시하는 포인터를 가진다.
그리고, 파생 클래스의 한 객체는, 가상 함수들의 주소로 이루어진 별개의 테이블을 지시하는 포인터를 가진다.
파생 클래스가 가상 함수에 대해 새로운 정의를 제공하면, vtbl은 새로 정의된 함수의 주소를 저장한다.
파생 클래스가 가상 함수를 다시 정의하지 않으면, vtbl은 그 함수의 오리지널 버전의 주소를 저장한다.
파생 클래스가 새로운 함수를 정의하고 그 함수를 가상으로 선언하면, 그 주소가 vtbl에 추가된다.

가상 함수를 호출하면, 프로그램은 객체에 vtbl 주소가 저장되어 있다는 것을 알게 되고, 가상 함수 주소들로 이루어진 해당 테이블에 접근한다.
사용하는 함수가 클래스 선언에 정의된 첫 번째 가상 함수라면, 프로그램은 그 배열에 있는 첫 번째 주소에 있는 함수를 실행시킨다.

결과적으로, 가상 함수를 사용하면 메모리와 실행 속도 측면에서 약간의 부담이 따르게 되므로, C++에서는 동적 결합보다는 정적 결합을 디폴트로 사용한다.
예를 들어, 상속을 위한 기본 클래스로 사용되지 않는 클래스를 설계한다면, 정적 결합을 사용하는 것이 이치에도 맞고 효율적이다.
