함수는 C++의 프로그래밍 모듈이다.
함수를 사용하려면 함수 정의와 함수 원형이 필요하고, 함수 호출 구문을 사용해야 한다.

(1) 함수의 원형
C++는 함수 원형을 필수적으로 요구한다.

함수 원형은 컴파일러에게 함수의 인터페이스를 알려 준다.
함수 원형은 사용자에게 다음과 같은 것을 보장한다.
-. 컴파일러가 함수의 리턴값을 바르게 처리한다.
-. 사용자가 정확한 개수의 매개변수를 사용했는지 컴파일러가 검사한다.
-. 사용자가 정확한 데이터형의 매개변수를 사용했는지 컴파일러가 검사한다. 사용자가 정확한 데이터형을 사용하지 않았다면, 컴파일러가 정확한 데이터형으로 변환한다.

C에서는 매개변수의 데이터형이 불일치하는 경우 에러가 발생한다.
그러나, C++에서는 잘못된 산술 데이터형이 전달되면 함수 원형에 정의되어 있는 데이터형으로 자동 변환시켜 준다.
그리고, 함수 원형 비교는 컴파일 시 이루어지며 이치에 맞을 때에만 데이터형을 변환한다. 예를 들어, 정수를 구조체나 포인터형으로는 변환하지 않는다.

(2) 함수의 매개변수
C++는 함수 매개변수를 값으로 전달한다.
함수 정의에 있는 형식 매개변수는 함수 호출이 제공하는 값으로 초기화되는 새로운 변수이다. 따라서, C++ 함수는 데이터의 복사본을 가지고 작업하게 되므로 원본 데이터는 보호된다.

(3) 배열을 처리하는 함수
C++는 배열 이름 매개변수를 첫 번째 배열 원소의 주소로 간주한다.
기술적으로 볼 때 그 포인터는 원본 주소의 복사본이기 때문에 여전히 값으로 전달된 형태이다. 그러나, 그 포인터를 사용하면 배열의 원본에 접근할 수 있다.

배열 이름 매개변수에는 크기 정보가 없기 때문에, 일반적으로 배열의 크기를 별도의 매개변수로 전달해야 한다.
아니면, STL 알고리즘에서와 같이 범위를 지정해 주기 위해서 배열의 시작과 끝 포인터를 보내는 방법도 있다.
-.	int	sumArr(const int ar[], size_t n);
-.	int	sumArr(const int *begin, const int *end);

(4) C 스타일의 문자열을 처리하는 함수
C++에서는 C 스타일의 문자열을 세 가지 방식으로 표현한다.
즉, 문자 배열, 문자열 리터럴, 문자열을 지시하는 포인터를 사용하여 표현한다.
세 가지 모두 char 형을 지시하는 포인터(정확하게는 char *형)이다. 따라서, 이 세 가지 모두 문자열 처리 함수에 매개변수로 사용할 수 있다.

C 스타일의 문자열에는 널 문자(\0)가 들어 있다.
C 스타일의 문자열 함수는 처리하고 있는 문자열의 끝을 판단하기 위해 널 문자를 사용하기 때문에, 문자열의 크기를 별도 매개변수로 전달할 필요가 없다.

(5) 구조체를 처리하는 함수
C++는 구조체를 기본 데이터형처럼 취급한다.
그러므로 구조체도 함수에 값으로 전달할 수 있으며, 함수의 리턴형으로 사용할 수도 있다.
그러나, 구조체의 덩치가 클 경우에는 구조체를 지시하는 포인터를 함수에 전달하는 것이 더 효율적이다. 동일한 내용이 classic 객체에도 적용된다.

(6) 함수의 재귀 호출
C++는 함수가 자기 자신을 호출하는 것을 허용한다. 이 과정을 재귀(recursion)라고 부른다.

재귀의 기초적인 사항은 아래와 같다.
-. 함수 호출의 각 수준은 자신만의 변수를 가진다.
-. 각각의 함수 호출은 return문에 의해 하나씩 청산된다.
-. 재귀 함수에서 재귀 호출보다 앞에 있는 문장들은 그 함수들이 호출되는 순서로 실행된다.
	ex) 제1수준 -> 제2수준 -> 제3수준 -> 제4수준
-. 재귀 함수에서 재귀 호출보다 뒤에 있는 문장들은 그 함수들이 호출되는 순서와 반대의 순서로 실행된다.
	ex) 제4수준 -> 제3수준 -> 제2수준 -> 제1수준

(7) 함수 포인터
데이터 항목들과 마찬가지로 함수도 주소를 가지고 있다.
함수의 주소는 그 함수에 해당하는 기계어 코드가 저장되어 있는 메모리 블록의 시작 주소이다.

함수의 주소를 매개변수로 전달하려면, 함수의 이름만 전달하면 된다. 즉, 함수의 이름이 함수의 주소처럼 취급된다.
함수의 주소를 저장할 수 있는 포인터를 선언하려면 그 함수의 데이터형을 지정해야 한다. 이 때, auto와 typedef을 적절하게 사용하면, 프로그램을 더 이해하기 쉽게 도와준다.
