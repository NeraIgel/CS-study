(1) 연산자 오버로딩
연산자 오버로딩은 C++가 가진 다형(polymorphism) 특성의 한 예이다.
연산자 오버로딩은 C++의 표준 연산자를 클래스 객체에 사용할 수 있게 해준다.
연산자 오버로딩은 오버로딩의 개념을 연산자에까지 확장하여, C++ 표준 연산자들에 다중적인 의미를 부여하는 것이다.

연산자 함수는 클래스 멤버 함수 또는 비멤버 함수가 될 수 있다. (연산자 중에 몇 가지는 클래스 멤버 함수만 될 수 있다.)
연산자 함수는 직접 함수를 호출함으로써 또는 오버로딩된 연산자를 일반적인 문법으로 사용함으로써 호출될 수 있다.
연산자 op와 관련된 연산자 함수를 정의하는 형식은 다음과 같다.
-.	operatorop(argument-list)

연산자 함수를 클래스 멤버 함수로 구현하였다면, 예를 들어 다음 형식 중 어느 하나를 사용하여 연산자 함수를 호출할 수 있다.
연산자 함수가 클래스 멤버 함수일 때, 첫 번째 피연산자 객체는 this 포인터를 사용하여 암시적으로 전달되고, 두 번째 피연산자 객체는 함수 매개변수로 명시적으로 전달된다.
ex)	Time	Time::operator+(const Time& rhs) const;

	T1 = T2.operator+(T3);	// 함수 표기
	T1 = T2 + T3;		// 연산자 표기 (피연산자들이 Time형이라는 사실이 Time 덧셈 정의를 사용해야 한다는 것을 컴파일러에게 말해준다.)

연산자 함수를 비멤버 함수로 구현하였다면, 예를 들어 다음 형식 중 어느 하나를 사용하여 연산자 함수를 호출할 수 있다.
연산자 함수가 비멤버 함수일 때, 피연산자 객체들은 함수 매개변수로 명시적으로 전달된다.
ex)	Time	operator+(const Time& lhs, const Time& rhs);

	T1 = operator+(T2, T3);	// 함수 표기
	T1 = T2 + T3;		// 연산자 표기

연산자 오버로딩 중에서 가장 유용한 것 중의 하나는, << 연산자를 정의하여 cout과 함께 사용함으로써 어떤 객체의 내용을 출력하는 것이다.
ostream 객체가 첫 번째 피연산자가 되게 하려면, 이 연산자 함수를 비멤버 함수로 정의해야 한다. 오버로딩된 << 연산자가 그 자체와 연결되게 하려면 ostream& 형을 리턴형으로 사용해야 한다.
다음은 이와 같은 요구 사항을 만족시키는 일반적인 형식이다.
-.	ostream&	operator<<(ostream& os, const ClassName& obj)
	{
		os << ... ;	// 객체의 내용을 출력한다.
		return (os);
	}

(2) 프렌드 함수
프렌드는 멤버 함수가 아닌 함수가 private 데이터에 접근할 수 있게 해주는 C++의 매커니즘이다.
프렌드는 다음과 같은 세 가지 형태로 사용된다.
-. 프렌드 함수
-. 프렌드 클래스
-. 프렌드 멤버 함수

어떤 클래스에 대한 프렌드 함수는 클래스 멤버 함수와 동등한 접근 권한을 가지는, 멤버가 아닌 함수이다.
어떤 클래스에 대한 프렌드 함수를 만들기 위해서는, 다음과 같이 그 함수를 클래스 선언 안에 선언하고, 함수 원형 선언 앞에 friend 키워드를 붙이면 된다.
ex)	class Vector {
	public:
		friend Vector	operator*(double n, const Vector& v);
	};

	Vector	operator*(double n, const Vector& v)
	{}

프렌드 함수는 비멤버 함수가 어떤 클래스의 private 데이터에 접근해야 할 때 사용할 수 있으며, 예를 들어 아래와 같이 클래스를 선언한 경우 다음과 같이 프렌드 함수를 정의할 수 있다.
ex)	namespace VECTOR
	{
		class Vector {
		public:
			Vector(double x, double y);
			~Vector();

			Vector	operator+(const Vector& rhs) const;
			Vector	operator-(const Vecotr& rhs) const;
			Vector	operator-(void) const;
			Vector	operator*(double n) const;

			friend Vector	operator*(double n, const Vector& v);
		private:
			double	_x;
			double	_y;
		};
	}

	namespace VECTOR
	{
		Vector	operator*(double n, const Vector& v)
		{
			return (Vector(n * v._x, n * v._y));	// Vector 생성자를 호출하여 익명 객체를 생성한다. 그러고 나서, 그 객체의 복사본을 리턴한다.
		}
	}

위에서 작성한 프렌드 함수는, 곱셈에서 어떤 값이 먼저 나오도록 함수 정의를 다음과 같이 고침으로써 프렌드가 아닌 비멤버 함수로 작성할 수 있다.
ex)	Vector	operator*(double n, const Vector& v)
	{
		return (v * n);					// v.operator*(n) 멤버 함수를 호출한다.
	}

(3) 변환 생성자와 변환 함수
C++는 다른 데이터형에서 클래스형 또는 클래스형에서 다른 데이터형으로 변환하는 것을 허용한다.
-. 다른 데이터형 -> 클래스형 : 클래스 변환 생성자(Converting constructor)
-. 클래스형 -> 다른 데이터형 : 클래스 변환 함수(Conversion function)

하나의 매개변수를 사용하는 클래스 생성자는, 그 매개변수의 데이터형을 클래스형으로 변환하는 역할을 한다.
변환 생성자는 아래와 같이 암시적으로 사용될 수 있으며, 매개변수 데이터형의 어떤 값으로 객체에 대입하거나 객체를 초기화하려고 할 때 자동으로 호출된다.
ex)	class Stonewt {
	public:
		Stonewt();
		Stonewt(double lbs);
	};
	void	display(const Stonewt& st, int n);

	Stonewt	myCat;
	myCat = 19.6;		// Stonewt(double) 생성자를 사용하여 Stonewt 임시 객체를 생성한다. 이 때 19.6을 초기화값으로 사용한다. 그러고 나서 임시 객체의 내용을 myCat에 복사한다.
	display(7300, 1);	// int형을 double형으로 먼저 변환한 후, Stonewt(double) 생성자를 사용하여 그 것을 Stonewt 임시 객체로 변환한다. 그러고 나서 임시 객체의 별칭을 사용한다.

위의 과정은 명시적 데이터형 변환이 필요 없이 자동으로 이루어지므로 암시적 데이터형 변환이라고 한다. 이 것은 사용자에게 예상하지 못한 부작용을 일으킬 수도 있다.
암시적 데이터형 변환을 방지하려면, 생성자 선언 앞에 키워드 explicit를 붙이면 된다.
ex)	class Stonewt {
	public:
		explicit Stonewt();
		explicit Stonewt(double lbs);
	};
	void	display(const Stonewt& st, int n);

	Stonewt	stn1;
	Stonewt stn2(19.6);			// OK
	Stonewt	stn3 = 19.6;			// Compile Error
	Stonewt	stn4 = Stonewt(19.6);		// OK

	stn1 = 19.6;				// Compile Error
	stn1 = 7300;				// Compile Error
	stn1 = Stonewt(19.6);			// OK
	stn1 = Stonewt(7300);			// OK

	display(stn1, 1);			// OK
	display(19.6, 1);			// Compile Error
	display(7300, 1);			// Compile Error
	display(Stonewt(19.6), 1);		// OK
	display(Stonewt(7300), 1);		// OK

클래스형을 다른 데이터형으로 변환하려면, 변환 함수라고 부르는 특별한 형태의 연산자 함수를 정의하고 변환 방법에 대한 지시를 제공해야 한다.
변환 함수는 멤버 함수여야 한다. 그리고 어떠한 매개변수도 사용하지 않으며, (리턴형을 선언하지 않는데도 불구하고) 변환된 값을 리턴한다.
변환 함수는 아래와 같이 정의할 수 있으며, 다음 형식 중 어느 하나를 사용하여 호출할 수 있다.
ex)	class Stonewt {
	public:
		operator double() const;	// 변환 함수도 C++11 이후부터는 explicit로 선언할 수 있다.
	private:
		double	_pounds;
	};

	Stonewt::operator double() const
	{
		return (_pounds);
	}

	Stonewt	wolfe(285.7);
	double	star = wolfe;			// 변환 함수를 암시적으로 사용
	double	host = double(wolfe);		// 변환 함수를 명시적으로 사용
