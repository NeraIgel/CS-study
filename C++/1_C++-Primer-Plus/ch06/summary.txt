C++는 선택을 다루는 도구로 if 구문, if else 구문, switch 구문을 제공한다.

if 구문은 단일 구문이나 구문 블록을 조건에 따라 수행하게 만든다. if else 구문은 두 개의 단일 구문이나 구문 블록 중에서 어느 것을 실행할 것인지 선택하게 만든다.
switch 구문은 선택 사항의 목록에서 하나의 특정한 경우를 선택하게 만든다.

(1) 논리 연산자와 조건 연산자
C++는 논리 연산자(&&, ||, !)를 사용하여 관계 표현식들을 결합하거나 수정하여 더욱 정교한 조건 검사를 수행할 수 있다.
조건 연산자(?:)는 두 값 중에서 하나를 선택하는 간결한 방법을 제공한다.

(2) 수를 읽어들이는 루프
cin 객체를 사용하여 수를 읽어들이는 루프를 작성할 때, 사용자가 잘못 입력하는 경우를 다음과 같이 핸들링할 수 있다.
ex)	double	fish[Max];

	int	i = 0;
	while (i < Max && std::cin >> fish[i])	// 입력이 성공하면, 배열의 범위를 벗어나지 않을 때까지 루프를 계속 실행
		std::cout << "fish #" << ++i << ": ";

앞의 예제는 수가 아닌 것이 입력된 후에는 어떠한 입력도 받아들이지 않는다.
앞의 예제와 다르게, 입력을 다시 받아들일 수 있게 핸들링하고 싶다면 다음과 같이 작성할 수 있다.
ex)	int	golf[Max];

	std::cout << "Please enter your golf score." << std::endl;
	for (int i = 0; i < Max; ++i)
	{
		std::cout << "round #" << i + 1 << ": ";
		while (!(std::cin >> golf[i]))		// 입력이 실패하면
		{
			std::cin.clear();		// 입력을 초기화한다.
			while (std::cin.get() != '\n')	// 그리고, 불량 입력을 제거한다.
				continue;
			std::cout << "Please enter your golf score." << std::endl;
		}
	}

(3) 파일 입출력
C++는 파일 입출력을 cin과 cout을 사용하듯이 처리할 수 있다.
C++는 파일 입출력을 위하여 fstream 헤더 파일을 포함시키고, ifstream과 ofstream 객체를 선언하여 그들을 파일과 연결한 후에, 이 객체들을 cin과 cout을 사용하는 것과 동일한 방식으로 사용한다.
ex)	std::ofstream	outFile;
	outFile.open("fish.txt");
	if (!outFile.is_open())
		exit(EXIT_FAILURE);
	outFile.precision(4);		// 파일 출력에 정밀도 4 사용

	double	wt = 125.8;
	outFile << wt;
	outFile.close();

ex)	std::ifstream	inFile;
	inFile.open("bowling.txt");
	if (!inFile.is_open())
		exit(EXIT_FAILURE);
	
	double	sum = 0.0;
	double	value;
	inFile >> value;
	while (inFile.good())		// while (inFile >> value) 구문으로 대체하여 작성하면 보다 간결하게 표현할 수 있다.
	{
		sum += value;
		inFile >> value;
	}
	if (inFile.eof())		// EOF만을 검사하기 때문에, 먼저 확인한다.
		std::cout << "파일의 끝입니다." << std::endl;
	else if (inFile.fail())		// EOF와 데이터형 불일치를 둘 다 검사하기 때문에, 두 번째로 확인한다.
		std::cout << "데이터형 불일치로 입력이 종료되었습니다." << std::endl;
	else
		std::cout << "알 수 없는 이유로 입력이 종료되었습니다." << std::endl;
	inFile.close();
