(1) 데이터 객체와 식별자
프로그램은 메모리에 데이터를 저장하며, 저장된 각 값은 물리적인 메모리 공간을 차지한다.
그런 메모리 덩어리를 C에서는 객체(object)라고 부른다. 객체는 저장된 값이 없더라도, 적합한 값을 저장할 수 있는 적당한 크기를 가져야 한다.
한편, 프로그램은 객체에 접근하는 방법을 필요로 하게 되고, 그 것은 변수를 정의함으로써 수행된다. 변수의 이름은 객체에 접근할 수 있는 식별자(identifier)이다.

변수의 이름은 객체를 지정하는 유일한 방법이 아니다. 일반적으로, 객체를 지정하는 식을 좌변값(lvalue)라고 부른다.
-. int ranks[10];
   int entity = 3;
   ranks + 2 * entity;		// 식별자도 아니고, 좌변값도 아니다.
   *(ranks + 2 * entity);	// 특정 메모리 위치의 값을 지정하므로, 좌변값이다.

(2) 메모리 관리
프로그램에서 데이터를 저장하는데 사용되는 메모리는 수명, 범위, 연계에 의해 특성이 정해진다.
수명은 데이터 객체의 지속성을 나타낸다. 범위와 연계는 식별자의 가시성을 나타낸다.

메모리는 정적 수명, 자동 수명, 할당된 수명을 가질 수 있다.
정적 메모리는, 프로그램 실행이 시잘될 떄 메모리가 할당되고, 프로그램이 실행되는 동안 계속 유지된다.
자동 메모리는, 프로그램 실행이 변수가 정의되어 있는 블록에 진입할 때 그 변수의 메모리가 할당되고, 프로그램 실행이 그 블록을 탈출할 때 해제된다.
할당된 메모리는, malloc() 함수를 호출함으로써 메모리가 할당되고, free() 함수를 호출함으로써 그 메모리가 해제된다.

범위는 파일 범위, 블록 범위를 가질 수 있다.
모든 함수들의 외부에 정의된 변수는, 파일 범위를 가진다.
블록 안에 정의된 변수나 함수 매개변수로 정의된 변수는, 블록 범위를 가진다.

연계는 무연계, 내부 연계, 외부 연계를 가질 수 있다.
블록 범위를 가지는 지역 변수는, 무연계를 가진다.
파일 범위를 가지는 변수는, 내부 연계 또는 외부 연계를 가질 수 있다.

(3) 저장 클래스
C는 다음과 같은 저장 클래스들을 제공한다.
대부분의 경우에, 자동 변수를 선택하는 것이 최선이다.
만일, 다른 메모리 유형의 변수를 사용하기로 결정한다면, 합당한 이유가 있어야 한다.

a. 자동(Automatic)
블록 안에(또는 함수 매개변수로) 선언된 변수는 자동 저장 클래스에 속한다.
자동 변수는 자동 수명, 블록 범위, 무연계를 가진다. 초기화하지 않으면, 자동 변수의 값은 결정되지 않는다.

b. 정적 무연계(Static, no linkage)
static 지정자를 사용하여 블록 안에 선언된 변수는 무연계 정적 클래스에 속한다.
이 블록 범위 정적 변수는 정적 수명, 블록 범위, 무연계를 가진다. 컴파일될 때 1회만 초기화되고, 명시적으로 초기화하지 않으면 0으로 설정된다.

c. 정적 내부 연계(Static, internal linkage)
static 지정자를 사용하여 모든 함수들의 외부에 선언된 변수는 내부 연계 정적 저장 클래스에 속한다.
내부 연계 정적 변수는 정적 수명, 파일 범위, 내부 연계를 가진다. 컴파일될 때 1회만 초기화되고, 명시적으로 초기화하지 않으면 0으로 설정된다.

d. 정적 외부 연계(Static, external linkage)
static 지정자를 사용하지 않고 모든 함수들의 외부에 선언된 변수는 외부 연계 정적 저장 클래스에 속한다.
외부 연계 정적 변수는 정적 수명, 파일 범위, 외부 연계를 가진다. 컴파일될 때 1회만 초기화되고, 명시적으로 초기화하지 않으면 0으로 설정된다.
외부 파일에 정의되어 있는 변수를 사용하기 위해서는, extern 키워드를 사용하여 미리 선언해야 한다.

(4) 데이터형 한정자
C99는 데이터형 한정자로 const, volatile, restrict를 제공한다.

const 데이터형 한정자는, 데이터를 상수로 한정한다.
volatile 데이터형 한정자는, 컴파일러 최적화를 위해서 제공되었다. 이 것이 붙어있으면, 다른 대행자에 의해 데이터가 변경될 수 있음을 알린다.
restrict 데이터형 한정자도, 컴파일러 최적화를 위해서 제공되었다. 포인터를 restrict로 한정하면, 그 포인터를 통해서만 데이터 블록에 접근할 수 있다.
