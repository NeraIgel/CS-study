(1) 루프문
loop는 강력한 프로그래밍 도구이다.
loop를 사용할 때에는 아래 세 가지 사항을 주의해야 한다.
-. 루프 검사에서 사용하는 값들을 처음 사용하기 전에 초기화해야 한다.
-. 매 사이클마다 검사를 갱신하는 어떤 것을 루프가 수행해야 한다.
-. 루프를 끝나게 만드는 조건을 분명하게 정의해야 한다.

C는 검사 조건을 수치적으로 처리한다. 결과가 0이면 거짓이고, 그 이외의 값은 참이다.
검사에는 관계 연산자를 사용하는 표현식이 흔히 사용된다. 관계 표현식은 참이면 1로, 거짓이면 0으로 평가된다.
관계 표현식은 문자와 함께 사용될 수 있다. 그러나, 문자열 비교에는 관계 연산자를 사용할 수 없고 별도 함수를 사용해야 한다.
관계 연산자는 부동소수점 수와 함께 사용할 수도 있다. 그러나, 부동소수점 수 비교에는 <과 >만 사용해야 한다. 왜냐하면, 반올림 오차 때문에 같지 않게 평가될 수도 있기 때문이다.

C는 세 가지 loop를 제공한다.
-. while (expression)
	statement
-. for (initialize; test; update)
	statement
-. do
	statement
   while (expression);

while과 for문은 진입 조건 loop를 제공한다. for문은 초기화와 갱신을 포함하는 loop 또는 인덱스를 이용하여 카운팅하는 loop에 적합하다.
콤마(,) 연산자는 for loop에서 하나 이상의 변수를 초기화시키거나 갱신할 수 있게 한다.
탈출 조건 loop가 필요한 경우에는, do while문을 사용할 수 있다.

콤마(,) 연산자는 두 가지 특성을 가지고 있다.
-. 콤마에 의해 분리되는 표현식들은 왼쪽에서 오른쪽 순서로 평가된다. (즉, 콤마는 시퀀스 포인트이다.)
-. 콤마가 들어 있는 전체 표현식의 값은 콤마 오른쪽에 있는 표현식의 값이다.

(2) 배열
배열은 동일한 데이터형을 가진 여러 데이터 원소들이 메모리에 순서대로 나열되어 있는 연속물이다.
배열 원소의 넘버링은 0부터 시작한다. 그래서 마지막 원소의 인덱스는 원소의 개수보다 항상 하나가 적다.
배열 원소들은 연속적으로 되어 있기 때문에, 일반적으로 loop와 함께 사용되어진다.
