(1) 문자열
C의 문자열은 널 문자 '\0'로 끝나는 char형 문자들의 연속물이다.
C의 문자열을 정의하는 방법은 여러 가지이다. 기본적인 방법은 문자열 리터럴, char형 배열, char형 포인터를 사용하는 것이다.

문자열 리터럴은 정적 저장 클래스(static storage class)로 저장된다.
이 것은 프로그램이 메모리에 적재될 때 문자열 리터럴도 같이 적재된다는 것을 의미하며, 리터럴 자체가 그 문자열이 저장된 장소를 가리키는 포인터처럼 동작한다.

(2) 문자열 초기화 - 배열 vs 포인터
문자열 리터럴은 char형 배열을 초기화하는데 사용할 수도 있고, char형 포인터를 초기화시키는 데에도 사용할 수 있다.
char형 배열을 초기화하는 경우, 정적 메모리에서 배열로 그 문자열의 내용이 복사되므로 저장공간이 2배가 된다.
char형 포인터를 초기화하는 경우, 그 문자열의 주소만을 복사한다.

문자열 리터럴을 이용하여 초기화를 하려는 경우, 만일 문자열을 변경할 것이라면 char형 배열을, 그렇지 않으면 cosnt char형 포인터를 사용하는 것이 좋다.

(3) 문자열 함수
C는 문자열을 조작하고, 검색하고, 분석할 수 있는 유용한 문자열 처리 함수들의 라이브러리를 제공한다.
문자열 함수들은, 조작할 문자열을 지정하기 위해 그 문자열의 첫 번째 문자를 가리키는 포인터를 사용한다.
일반적으로 함수가, 널 문자를 사용하여 문자열의 끝을 인식할 수 있기 때문에, 문자열의 길이는 전달할 필요가 없다.

C 라이브러리는 여러 개의 문자열 처리 함수들을 가지고 있다. ANSI C에서, 이 함수들은 string.h에 선언되어 있다.
또한, 이 라이브러리는 여러 개의 문자 처리 함수들도 제공한다. 이 함수들은 ctype.h에 선언되어 있다.

(4) 명령행 전달인자
최신 그래픽 인터페이스 이전에는 명령행 인터페이스가 사용되었다. DOS와 Unix가 그 예이다. 그리고 Linux 터미널은 Unix 같은 명령행 환경을 제공한다.
명령행(command line)은 명령행 환경에서 프로그램을 실행시키기 위해 사용자가 타이핑하는 라인이다.

명령행 전달인자(command-line argument)는 명령행에 추가되는 항목이다.
C 프로그램은 이 추가되는 항목들을 읽어 필요한 용도에 사용할 수 있다.

C 컴파일러는 main()이 전달인자를 전혀 사용하지 않거나, 두 개의 전달인자를 사용하는 것을 허용한다.
(일부 컴파일러는 추가 전달인자를 허용한다. 그러나, 그 것은 표준의 확장이다.)

첫 번째 전달인자는 명령행에 있는 문자열의 개수다. 관례적으로, 이 첫 번째 int형 전달인자를 (argument count라는 의미에서) argc라고 부른다.
두 번째 전달인자는 명령행에 있는 문자열 배열이다. 관례적으로, 이 두 번째 char**형 전달인자를 (argument value라는 의미에서) argv라고 부른다.
argv[0]은 프로그램 이름 자체가 대입된다. 그러고 나서 argv[1]은 그 다음에 오는 첫 번째 문자열이 대입된다. 나머지도 이런 식으로 계속된다.
