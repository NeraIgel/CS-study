C의 설계 철학은, 함수를 건축물의 벽돌처럼 사용하는 것이다.
함수(function)는, 하나의 특정 작업을 수행하도록 독립적으로 설계된 프로그램 코드의 한 단위이다.

함수를 사용하면, 반복적인 프로그래밍을 피할 수 있다.
또한, 함수를 사용하면 프로그램이 모듈화되므로 코드를 읽기 쉽고, 변경하거나 에러를 수정하기가 쉬워진다.
함수를 블랙박스 관점으로 바라보면, 함수 내부의 세부적인 구현보다 프로그램 전체적인 설계에 보다 집중할 수 있다.

(1) 프로토타입
변수들과 마찬가지로, 함수도 데이터형을 가진다.
함수를 사용하는 프로그램은, 그 것을 사용하기 전에 그 함수의 데이터형을 미리 선언해야 한다.

ANSI C는 함수 프로토타입핑을 제공한다.
이 것은 함수 호출에서 전달인자의 개수와 데이터형을 정확하게 사용했는지 컴파일러에게 검증하게 하는 강력한 도구이다.

(2) 함수 커뮤니케이션
함수에 값을 전달하려면 전달인자를 사용한다.
함수의 결과 값을 받고 싶을 때에는 리턴값을 활용한다.

함수에 값을 전달할 때 형식매개변수(formal parameter)와 실전달인자(actual argument)의 개념이 사용된다.
형식매개변수는 좌변값이고, 실전달인자는 우변값이다. 따라서, 실전달인자는 하나의 값으로 평가되며 함수 호출 시 형식매개변수에 그 값이 복사된다.

함수는 다른 함수에 선언된 변수에 직접 접근할 수 없다.
이와 같은 데이터 접근의 제한 때문에 데이터의 무결성이 유지된다.
그러나, 함수가 다른 함수에 있는 데이터에 꼭 접근할 필요가 있다면, 포인터를 함수의 전달인자로 사용할 수 있다.

(3) 재귀
C는 함수가 자기 자신을 호출하는 것을 허용한다. 이 과정을 재귀(recursion)라고 부른다.
어떤 문제들은 재귀를 사용해야만 해결할 수 있다. 그러나, 재귀는 메모리와 시간을 많이 소모한다는 점에서 비효율적일 수 있다.

재귀의 기초적인 사항은 아래와 같다.
-. 함수 호출의 각 수준은 자신만의 변수를 가진다.
-. 각각의 함수 호출은 return문에 의해 하나씩 청산된다.
-. 재귀 함수에서 재귀 호출보다 앞에 있는 문장들은 그 함수들이 호출되는 순서로 실행된다.
	ex) 제1수준 -> 제2수준 -> 제3수준 -> 제4수준
-. 재귀 함수에서 재귀 호출보다 뒤에 있는 문장들은 그 함수들이 호출되는 순서와 반대의 순서로 실행된다.
	ex) 제4수준 -> 제3수준 -> 제2수준 -> 제1수준

재귀 함수는 재귀 호출의 시퀀스를 중단시킬 수 있는 구문을 반드시 가져야 한다.
