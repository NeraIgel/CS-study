C에서 제공하는 기본 데이터형만으로는 프로그램의 복잡한 데이터를 표현하기 어려울 수 있다.
C는 융통성있게 데이터를 표현할 수 있도록 여러 가지 수단들을 제공한다.

(1) 구조체
C 구조체는, 일반적으로 데이터형이 서로 다른 여러 개의 데이터 항목들을 하나의 데이터 객체(object)에 저장하는 수단을 제공한다.
태그(tag)를 사용하여, 특정 구조체 템플릿을 식별하고 그 구조체형의 변수들을 정의할 수 있다.
-.	struct tag {
		member1;
		member2;
		member3...
	};

구조체 템플릿 선언은 데이터를 표현하는 방법을 컴파일러에게 알려 주지만, 이 시점에 기억 공간은 할당되지 않는다.
구조체 변수를 정의하면, 컴파일러는 구조체 템플릿을 사용하여 개별 멤버들에 대한 기억 공간들을 할당하고 해당 구조체 변수 이름을 식별자로 취급한다.

도트 연산자(.)는 구조체 템플릿에 있는 태그(약식 레이블)를 사용하여 구조체의 개별 멤버들에 접근할 수 있다.
구조체를 가리키는 포인터를 선언하면, 이름과 도트 연산자 대신에 포인터와 간접 멤버 연산자(->)를 사용하여 구조체의 개별 멤버들에 접근할 수 있다.

최신의 C는 한 구조체를 다른 구조체에 대입하는 것을 허용한다. 배열의 경우에는 이 것을 할 수 없다.
ANSI C를 포함하여 최신의 C에서는, 구조체를 함수의 전달인자로 전달할 수 있을뿐만 아니라, 함수의 리턴 값으로도 리턴할 수 있다.

일반적으로, 구조체 관련 함수들은 효율성을 이유로 구조체를 가리키는 포인터를 전달인자로 사용한다. 이 때 데이터 변경을 방지하고자 한다면 const를 사용한다.

(2) 공용체
공용체는 구조체와 동일한 신택스를 사용한다. 그러나, 공용체에서 멤버들은 동일한 기억 공간을 공유한다.
즉, 공용체는 선택 리스트에 들어 있는 한 가지 데이터형만 저장하고자 할 때 유용하다.

(3) 열거형
열거형을 사용하여, 한 무리의 정수 기호 상수들을 설정하고 기호 이름을 선언할 수 있다. 열거형은 프로그램의 가독성을 높이는게 목적이다.
enum 키워드를 사용하여 새로운 데이터형을 만들고, 그 데이터형이 가질 수 있는 값들을 지정할 수 있다.
enum 상수들은 기본 설정으로 정수 값 0, 1, 2, 3 등으로 대입된다.

(4) typedef
typedef는 기본 데이터형이나 유도 데이터형에 새로운 식별자를 부여하는 수단을 제공한다.
#define과 비슷하지만, 세 가지 차이점이 있다.

-. #define과는 달리, typedef는 값이 아니라 데이터형에만 기호 이름을 부여할 수 있도록 제한된다.
-. #define과는 달리, typedef 해석은 전처리기가 아니라 컴파일러가 수행한다.
-. 범위 지정에 대하여, typedef은 #define보다 융통성이 있다.
