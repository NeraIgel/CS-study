C는 정수 안에 들어 있는 개별적인 비트들을 조작할 수 있다.
C는 두 가지 접근 방법을 사용하여 비트들에 접근하여 조작할 수 있다.
하나는 비트 단위 연산자들을 사용하는 것이고, 또 다른 하나는 구조체에 비트 필드를 만드는 것이다.

(1) 2진수, 8진수, 16진수, 비트, 바이트
컴퓨팅 하드웨어는, 메모리와 레지스터에 있는 비트들의 on/off 상태를 2진수인 1과 0으로 나타낼 수 있기 때문에, 2진수 체계와 밀접한 관련이 있다.
2진수 숫자 하나가 1비트를 나타내듯이, 8진수 숫자 하나는 3비트를 나타내고, 16진수 숫자 하나는 4비트를 나타낸다.
16진수의 각 숫자는 2진수의 네 숫자에 대응한다. 그래서, 16진수 숫자 2개는 정확히 8비트 바이트에 대응한다.
16진수 첫 번째 숫자는 상위 4비트를 나타내고, 두 번째 숫자는 하위 4비트를 나타낸다.

메모리 칩과 데이터 전송률을 표시하는 데에는 8비트 바이트가 사용된다.
그러나, C에서는 시스템이 사용하는 문자 집합을 저장하는 데 필요한 크기를 바이트라고 부른다.
분명히 하기 위해서, 컴퓨팅의 세계는 종종 8-비트 바이트를 부를 때 옥텟(octet)이라는 용어를 사용한다.

(2) 비트 단위 연산자
C는 몇 가지 비트 단위 연산자들을 제공한다.
이들을 비트 단위 연산자라고 부르는 이유는, 어떤 값에 들어 있는 개별적인 비트를 독립적으로 처리할 수 있기 때문이다.

비트 단위 연산자의 설명은 아래와 같다.
-. ~ : 피연산자의 각 비트를 모두 반전시킨다.
-. & : 두 피연산자의 서로 대응하는 두 비트가 모두 1이면 1로, 그렇지 않으면 0으로 만든다.
-. | : 두 피연산자의 서로 대응하는 두 비트 중 어느 하나라도 1이면 1로, 그렇지 않으면 0으로 만든다.
-. ^ : 두 피연산자의 서로 대응하는 두 비트 중 (둘 다 1이 아니라) 어느 하나만 1일 때 1로, 그렇지 않으면 0으로 만든다.
-. << : 주어진 비트 수만큼 비트 패턴을 왼쪽으로 이동시킨다. 비워지는 비트들은 0으로 채워진다.
-. >> : 주어진 비트 수만큼 비트 패턴을 오른쪽으로 이동시킨다. 비워지는 비트들은, 값이 부호 없는 데이터형이면 0으로 채워지고, 부호 있는 데이터형이면 컴파일러에 따라 다르다.

비트 단위 연산자는 다음과 같이 활용해볼 수 있다.
ex)	flags &= MASK;				// 일부 비트들은 on(1), 일부 비트들은 off(0)으로 설정할 수 있다.
	ch &= 0xff;					// ch의 마지막 8비트 값만 추출할 수 있다.

ex)	flags |= MASK;				// 일부 비트들만 on(1)으로 설정할 수 있다.

ex)	flags &= ~MASK;				// 일부 비트들만 off(0)으로 설정할 수 있다.

ex)	flags ^= MASK;				// 마스크에 있는 1인 비트에 대응하는 값들은 토글되고, 0인 비트에 대응하는 값들은 변하지 않는다. (0^0:0, 1^0:1, 0^1:1, 1^1:0)

ex)	if ((flags & MASK) == MASK)	// 마스크에 있는 비트가 on(1) 되어 있는지 확인할 수 있다.
		statement

ex)	number << n					// number에 2의 n승씩 곱한다.
	number >> n					// number가 음수가 아니라면, number를 2의 n승씩 나눈다.

ex)	red = color & BYTE_MASK;			// 색상정보를 추출한다.
	green = (color >> 8) & BYTE_MASK;
	blue = (color >> 16) & BYTE_MASK;

ex)	int	invert_end(int num, int bits)	// num의 마지막 bits 개의 비트들을 토글시킨다.
	{
		int	mask = 0;
		int	bitval = 1;

		while (bits-- > 0)
		{
			mask |= bitval;
			bitval << 1;
		}
		return (num ^ mask);
	}

(3) 비트 필드
C는 구조체에 있는 비트 필드들을 사용하여, 어떤 값에 있는 비트들을 개별적으로 또는 묶어서 조작할 수 있다.

비트 필드는 하나의 signed int형 또는 하나의 unsigned int형 안에 있는 이웃하는 비트들의 집합이다.
비트 필드는 각 필드에 레이블을 붙이고, 그들의 크기를 지정하는 구조체 선언을 통해 설정한다.
-.	struct
	{
		unsigned int	code1 : 1;
		unsigned int	code2 : 2;
		unsigned int	code3 : 8;
	} prcode;

비트 필드 멤버는 보통의 구조체 멤버 연산자를 사용하여 접근할 수 있다.
-.	prcode.code1 = 0;
	prcode.code2 = 3;
	prcode.code3 = 102;

비트 필드들이 들어가는 순서는 컴퓨터 기종마다 다르다. 또한, 필드 사이의 경계들의 위치도 기종마다 다르다.
이러한 이유 때문에, 비트 필드는 이식성이 매우 낮다는 것을 감안해야 한다.
