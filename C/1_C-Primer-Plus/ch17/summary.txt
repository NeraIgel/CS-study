(1) 데이터 표현
프로그램 개발에서 중요한 것은, 그 프로그램으로 처리할 데이터를 가장 적절하게 표현하는 일이다.
데이터형을 설계하는 것은, 데이터를 저장하는 방법과 그 데이터를 다루는 함수들의 집합을 설계하는 것으로 귀착된다.

(2) 추상 데이터 타입
일반적으로 사용자는 프로그램이 수행해야 하는 모든 것을 미리 예상할 수 없다.
프로그래밍 프로젝트의 규모가 커짐에 따라, 모든 것을 미리 계획하는 프로그래머나 프로그래밍 팀은 점점 비현실적이 된다.

계획을 변경할 필요가 생겼을 때, 원래의 아이디어를 쉽게 바꾸기 위해서는, 사용자 인터페이스와 코드의 상세 구현을 분리시키는 것이 좋다.
예를 들어, 리스트에 항목을 추가하는 것은 드러나게 하고, 메모리 관리 함수를 호출하고 포인터를 설정하는 것과 같은 코딩의 세부 사항은 감추는 방식으로 작성할 수 있다면 좋을 것이다.

추상 데이터형(ADT: Abstract Data Type)은 데이터형을 특징짓는 속성과 연산을 추상적으로 서술하는 개념이다.
개념적으로, 사용자는 ADT를 두 단계를 거쳐 특별한 프로그래밍 언어로 변환할 수 있다.
-. 프로그래밍 인터페이스를 정의한다. (데이터를 저장하는 방법과, 원하는 연산들을 수행하는 함수들의 집합을 서술한다.)
-. 인터페이스를 구현한다.

리스트, 큐, 바이너리 트리 등은 흔히 사용되는 ADT들이다.
일반적으로 이들은 동적 메모리 할당과 링크드 구조체를 사용한다. 그러나, 때로는 배열을 사용하여 구현하는 것이 더 좋은 경우도 있다.
