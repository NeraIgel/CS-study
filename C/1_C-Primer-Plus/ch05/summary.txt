(1) 연산자
C는 다양한 기능을 수행하는 연산자들을 제공한다.
각각의 연산자는 요구하는 피연산자의 개수, 우선순위, 결합 방향에 의해 특성이 주어진다.
우선순위와 결합방향은 두 연산자가 하나의 피연산자를 공유할 때 어느 연산자가 먼저 적용되는지를 결정한다.

대입연산자에서는 객체, 좌변값, 우변값이라는 개념이 활용된다.
객체는 실제 데이터 저장 공간을 참조하는 것을 의미하며 좌변값은 그 저장 공간에 대한 레이블이다. 그리고, 우변값은 좌변값에 대입할 수 있는 수를 의미한다.

sizeof 연산자는 피연산자의 크기를 바이트 단위로 리턴한다.
C에서 바이트는 char형이 사용하는 크기로 정의되며, 이 것은 대부분 8비트였다.
C에서 sizeof 연산자는 size_t형을 리턴하는데 이 것은 내부적으로 typedef을 활용하며, 특정 데이터형에 대한 별명일 뿐이다.
이렇게 함으로써, 사용자 시스템에 따라서 특정 시스템에서는 unsigned int로 다른 시스템에서는 unsigned long으로 취급될 수 있게끔 해준다.

(2) 표현식과 문장
표현식(expression)은 연산자와 피연산자들의 결합이다.
가장 간단한 표현식은 하나의 피연산자이다. C에서 모든 표현식은 하나의 값을 가진다.

문장(statement)은 프로그램을 구성하는 기본 요소이다.
문장은 컴퓨터에게 내리는 하나의 완전한 지시이다. C에서 문장들은 끝에 세미콜론(;)을 붙여서 나타낸다.

부작용(side effect)은 데이터 객체나 파일이 변경되는 것을 말한다.
C에서는 표현식을 평가하는 것이 주된 목적이므로, 대입문에서 좌변값에 값이 대입되는 것과 같은 것은 side effect일 뿐이다. 전위/후위 연산자도 같은 개념이다.

시퀀스 포인트(sequence point)는 프로그램 실행에서 다음 단계로 넘어가기 전에 모든 부작용(side effect)이 평가되는 지점을 말한다.
C에서는 문장에 있는 세미콜론(;)이 시퀀스 포인트를 나타낸다. 또한, 콤마연산자(,)나 완전 표현식의 끝도 시퀀스 포인트이다.
시퀀스 포인트는 아래 예와 같이 후위 증가가 일어나는 시점을 명백히 하는데 도움을 준다.
ex) while(i++ < 10)
		printf("%d\n", i);	// i는 printf()가 호출되기 전에 이미 증가한다. 왜냐하면, while() 루프의 검사 조건문은 완전표현식이므로 side effect의 완료를 보장한다.

(3) 데이터형 변환
C는 서로 다른 수치 데이터형이 결합된 표현식을 작성하는 것을 허용한다.
그러나, 산술 연산은 피연산자들이 동일한 데이터형일 것을 요구한다. 그래서, C는 자동 데이터형 변환을 수행한다. 
하지만, 자동 데이터형 변환은 때때로 의도하지 않은 동작을 일으킬 수 있으므로 그 것에 의존하지 않는 것이 현명한 습관이다.

자동 데이터형 변환에 관한 기본 규칙은 아래와 같다.
-. char형과 short형은 수식에 나타날 때 또는 함수의 전달인자로 사용될 때 자동으로 int형으로, 필요하면 unsigned int형으로 올림 변환이 일어난다.
-. float형은 함수의 전달인자로 사용될 때 double형으로 올림 변환이 일어난다.
-. 산술 연산에서 데이터형을 혼합하여 사용하면, 작은 데이터형이 큰 데이터형으로 올림 변환된다.
-. 한 데이터형의 값이 다른 데이터형의 변수에 대입될 때, 그 값은 그 변수와 같은 데이터형으로 변환된다. 이 때 경우에 따라서 데이터 손실이 발생할 수도 있다.
