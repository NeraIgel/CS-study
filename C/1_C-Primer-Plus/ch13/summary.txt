(1) 표준 파일 입출력 패키지
대부분의 C 컴파일러들은 저수준 입출력 서비스와 고수준 입출력 서비스를 모두 제공한다.
ANSI C 라이브러리는 저수준 입출력 서비스가 아닌 표준 입출력 서비스만 포함하기 때문에, 표준 패키지가 좀 더 이식성이 높다.

C는 입출력을 바이트들의 스트림으로 인식한다.
C가 바이트들의 입출력 스트림을 해석하는 방법은, 사용하는 입출력 함수에 따라 다르다.
정밀도 손상 없이 저장하고 읽어야 하는 수치 데이터를 가지고 있다면, fread()와 fwrite() 함수를 바이너리 모드로 사용하여야 한다.
텍스트 데이터를 일반 텍스트 에디터로 열어 볼 수 있는 파일에 저장할 생각이라면, getc()와 fprintf() 같은 함수들을 텍스트 모드로 사용하여야 한다.

표준 입출력 패키지는 데이터 전송 속도를 높이기 위해 입력 버퍼와 출력 버퍼를 자동으로 만든다.
fopen() 함수는 표준 입출력을 위해 파일을 열고, 그 파일과 버퍼에 관련된 정보를 담도록 설계된 데이터 구조체를 만들어서, 그 구조체를 가리키는 포인터를 리턴한다.

(2) 표준 파일 입력 매커니즘
일반적으로, 표준 파일 입력을 사용하는 첫 단계는 fopen() 함수를 사용하여 파일을 여는 것이다.
우리는 이 것을 fopen() 함수가 "하나의 스트림을 열었다"라고 말한다. 사용한 모드에 따라서 텍스트 스트림 또는 바이너리 스트림을 얻는다.

일반적으로, 그 다음 단계는 stdio.h에 선언되어 있는 fscanf(), getc(), fgets()와 같은 입력 함수들 중 하나를 호출하는 것이다.
이 함수들 중 어느 하나를 호출하면, 한 덩어리의 데이터가 파일로부터 버퍼로 복사된다.

데이터 구조체와 버퍼가 초기화된 후, 입력 함수는 요청된 데이터를 버퍼로부터 읽기 시작한다.
버퍼에 있는 모든 문자들을 읽었다는 것을 알게 되었을 때, 입력 함수는 버퍼 크기만큼의 그 다음 데이터 덩어리를 파일로부터 버퍼로 복사하도록 요청한다.

마지막 데이터 덩어리에 있는 마지막 문자를 읽은 후에, 입력 함수는 파일 끝 지시자를 참으로 설정한다.
그러고 나면, 입력 함수의 다음 번 호출은 EOF를 리턴하게 되므로, 프로그램은 파일의 끝을 인식할 수 있게 된다.

(3) 파일 모드
모든 파일 컨텐츠는 2진법(바이너리) 형태이다.
만일, 파일이 문자를 표현하기 위해 캐릭터용으로 2진 코드를 사용한다면 그 것은 텍스트 컨텐츠 파일이다.
만약 대신에, 기계어 코드 또는 수치 데이터 또는 이미지나 음악 인코딩을 표현한다면 그 것은 바이너리 컨텐츠 파일이다.

Unix는 두 종류의 컨텐츠에 같은 파일 포맷을 사용한다.
Unix 디렉토리는 프로그램이 파일 끝에 도달했을 때를 결정하는데 사용할 수 있도록 파일크기 카운트를 유지한다.
그러나, 다른 시스템들은 텍스트를 유지하기 위해 특별하게 파일들을 다루는 다른 방법을 사용한다. 즉, Unix 모델과는 다른 텍스트 파일용 포맷이 있다는 것이다.

텍스트 파일을 처리하기 위한 일부 규칙을 가져오기 위해, C는 파일에 엑세스하는 두 가지 방식, 즉 텍스트 모드와 바이너리 모드를 제공한다.
바이너리 모드에서, 프로그램은 파일의 각 바이트에 그리고 모든 바이트에 접근할 수 있다.
텍스트 모드에서는, 프로그램이 인식하는 내용과 파일에 있는 내용이 다를 수 있다.

텍스트 파일을 반드시 텍스트 관점으로만 사용해야 하는 것은 아니다.
같은 파일을 바이너리 관점으로도 사용할 수 있다. 이 경우, 라인 끝과 파일 끝이 C 표현 관점으로 맵핑되지 않을 뿐이다.

(4) 파일 임의 접근
일반적으로 입력 함수 getc(), fgets(), fscanf(), fread()는 파일의 시작 위치에서부터 파일을 순차적으로 읽는다.
그러나, fseek()와 ftell() 함수는 프로그램을 파일 내의 임의 위치로 이동시켜, 임의 접근을 가능하게 한다.
fgetpos()와 fsetpos() 함수는 이와 비슷한 기능을 크기가 큰 파일에까지 확장한다.
파일 임의 접근은 텍스트 모드보다 바이너리 모드에서 잘 동작한다.
